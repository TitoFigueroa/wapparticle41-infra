---
AWSTemplateFormatVersion: 2010-09-09
Description: Amazon EKS - Node Group for wapparticle41

Parameters:

  Environment:
    Description: An environment name that is prefixed to resource names
    Type: String
    AllowedPattern: "^(dev|qa|perf|prod)[0-9]?$"
    Default: "dev"

  ClusterName:
    Description: The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster.
    Type: String
    Default: wapparticle41-eks-cluster

  NodeGroupName:
    Description: Unique identifier for the Node Group.
    Type: String
    Default: wapparticle41-eks-nodegroup

Mappings:
  EnvironmentMaps:
    dev:
      NodeInstanceType: t3a.large
      NodeVolumeSize: 20
    qa:
      NodeInstanceType: t3a.large
      NodeVolumeSize: 20
    perf:
      NodeInstanceType: t3a.xlarge
      NodeVolumeSize: 30
    prod:
      NodeInstanceType: t3a.xlarge
      NodeVolumeSize: 30

Resources:

  Wapparticle41EKSCluster:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: !Sub ${Environment}-${ClusterName}
      Version: '1.14'
      RoleArn: !Ref Wapparticle41eksClusterRole
      ResourcesVpcConfig:
        SecurityGroupIds:
        - !Ref NodeSecurityGroup
        SubnetIds:
        - "{{resolve:ssm:ksprivsubnet1:1}}" 
        - "{{resolve:ssm:ksprivsubnet2:1}}" 

  Wapparticle41eksClusterRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - eks.amazonaws.com
            Action:
            - sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSNodegroup:
      Type: 'AWS::EKS::Nodegroup'
      Properties:
        ClusterName: !Sub ${Environment}-${NodeGroupName}
        NodeRole: !Ref Wapparticle41eksClusterRole
        InstanceTypes: 
          - !FindInMap [EnvironmentMaps, !Ref Environment, NodeInstanceType]
        ScalingConfig:
          MinSize: 2
          DesiredSize: 2
          MaxSize: 2
        Labels:
          Key1: Value1
          Key2: Value2
        Subnets:
          - "{{resolve:ssm:ksprivsubnet1:1}}" 
          - "{{resolve:ssm:ksprivsubnet2:1}}" 

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      VpcId: "{{resolve:ssm:ksvpcid:1}}"
      Tags:
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          Value: owned

  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow node to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId: !Ref NodeSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId: !Ref NodeSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

Outputs:

  NodeSecurityGroup:
    Description: The security group for the node group
    Value: !Ref NodeSecurityGroup
